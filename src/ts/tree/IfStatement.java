
package ts.tree;

import ts.Location;
import ts.tree.visit.TreeVisitor;

/**
 * AST if else node node.
 *
 */
public class IfStatement extends Statement
{
  public boolean hasElse = false;
  private Expression exp;
  private Statement s1;
  private Statement s2;

  /** Construct a binary operator node.
   *
   *  @param loc    source code location of operator.
   *  @param exp    conditional of loop, left subtree
   *  @param s1     the right subtree of the operator if true.
   *  @param s2     the right subtree of the operator if false.
   */
  public IfStatement(final Location loc,
     final Expression exp, final Statement s1, final Statement s2)
  {
    super(loc);
    this.exp = exp;
    this.s1 = s1;
    this.s2 = s2;

    if (s1 != s2) {
      hasElse = true;
    }
  }

  /** Get the exp subtree of the node.
   *
   *  @return the exp subtree of the node.
   */
  public Expression getExp()
  {
    return exp;
  }

  /** Set the exp subtree of the node.
   *
   *  @param exp the exp subtree of the node.
   */
  public void setExp(Expression exp)
  {
    this.exp = exp;
  }

  /** Get the right subtree of the node for true.
   *
   *  @return the subtree of the node, when true.
   */
  public Statement getTrue()
  {
    return s1;
  }

  /** Set the right subtree of the node.
   *
   *  @param t the new right subtree of the node.
   */
  public void setTrue(Statement t)
  {
    this.s1 = t;
  }

  /** Get the subtree of the node for false.
   *
   *  @return the subtree of the node, when false.
   */
  public Statement getFalse()
  {
    return s2;
  }

  /** Set the subtree of the node when false.
   *
   *  @param f the subtree of the node when false.
   */
  public void setFalse(Statement f)
  {
    this.s2 = f;
  }

  /** Apply a visitor to the node.
   *
   *  @param visitor the visitor to apply.
   *
   *  @return the value generated by the visitor.
   */
  @Override public <T> T apply(TreeVisitor<T> visitor)
  {
    return visitor.visit(this);
  }
}

