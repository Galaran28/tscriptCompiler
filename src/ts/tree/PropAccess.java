package ts.tree;

import ts.Location;
import ts.tree.visit.TreeVisitor;

import java.util.List;

/**
 * node for a property access.
 *
 */
public final class PropAccess extends Expression
{
  private Expression object, prop;

  /** Construct prop access.
   *
   *  @param loc the source code location of the expression.
   *  @param object name of the object.
   *  @param prop name of the property in object.
   */
  public PropAccess(final Location loc,
      final Expression object, final Expression prop)
  {
    super(loc);
    this.object = object;
    this.prop = prop;
  }

  /** Get the object wich is being accessed.
   *
   *  @return the property name.
   */
  public Expression getObject()
  {
    return object;
  }

  /** Get the property.
   *
   *  @return the expression subtree.
   */
  public Expression getProp()
  {
    return prop;
  }

  /** Set the object wich is being accessed.
   *  @param object new object subtree
   */
  public void setObject(Expression object)
  {
    this.object = object;
  }

  /** Set the prop name.
   *  @param prop new object subtree
   */
  public void setProp(Expression prop)
  {
    this.prop = prop;
  }

  /** Apply a visitor to the node.
   *
   *  @param visitor the visitor to apply.
   *
   *  @return the value generated by the visitor.
   */
  @Override public <T> T apply(TreeVisitor<T> visitor)
  {
    return visitor.visit(this);
  }
}

