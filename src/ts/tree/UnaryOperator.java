
package ts.tree;

import ts.Location;
import ts.tree.visit.TreeVisitor;

/**
 * AST unary operator node.
 *
 */
public class UnaryOperator extends Expression
{
  private Unop op;
  private Expression expression;

  /** Construct a unary operator node.
   *
   *  @param loc   source code location of operator.
   *  @param op    specific unary operator being constructed.
   *  @param expression  subtree of the operator.
   */
  public UnaryOperator(final Location loc, final Unop op,
     final Expression expression)
  {
    super(loc);
    this.op = op;
    this.expression = expression;
  }

  /** Retrieve the specific unary operator represented by the node.
   *
   *  @return the specific unary operator represented by the node.
   */
  public Unop getOp()
  {
    return op;
  }

  /** Convert operator kind to (Java) String for displaying.
   *
   *  @return Java string for the name of this operator
   */
  public String getOpString()
  {
    return op.toString();
  }

  /** Get the expression subtree of the node.
   *
   *  @return the expression subtree of the node.
   */
  public Expression getExp()
  {
    return expression;
  }

  /** Set the expression subtree of the node.
   *
   *  @param expression the new expression subtree of the node.
   */
  public void setExp(Expression expression)
  {
    this.expression = expression;
  }

  /** Apply a visitor to the node.
   *
   *  @param visitor the visitor to apply.
   *
   *  @return the value generated by the visitor.
   */
  @Override public <T> T apply(TreeVisitor<T> visitor)
  {
    return visitor.visit(this);
  }
}

