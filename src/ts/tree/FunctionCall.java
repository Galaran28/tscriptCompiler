package ts.tree;

import ts.Location;
import ts.tree.visit.TreeVisitor;

import java.util.List;

/**
 * node for a function call
 *
 */
public final class FunctionCall extends Expression
{
  private List<Expression> args;
  private Expression exp;

  /** Construct an expression statement.
   *
   *  @param loc the source code location of the expression.
   *  @param exp function name expression
   *  @param args list of args
   */
  public FunctionCall(final Location loc,
      final Expression exp, final List<Expression> args)
  {
    super(loc);
    this.exp = exp;
    this.args = args;
  }

  /** Get the list of statements.
   *
   *  @return the statement list.
   */
  public List<Expression> getArgs()
  {
    return args;
  }

  public Expression getExp()
  {
    return exp;
  }

  /** Apply a visitor to the node.
   *
   *  @param visitor the visitor to apply.
   *
   *  @return the value generated by the visitor.
   */
  @Override public <T> T apply(TreeVisitor<T> visitor)
  {
    return visitor.visit(this);
  }
}

