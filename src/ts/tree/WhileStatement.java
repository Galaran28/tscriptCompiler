
package ts.tree;

import ts.Location;
import ts.tree.visit.TreeVisitor;

/**
 * AST while loop node.
 *
 */
public class WhileStatement extends Statement
{
  private Expression exp;
  private Statement stat;

  /** Construct a binary operator node.
   *
   *  @param loc   source code location of operator.
   *  @param exp    conditional of loop, left subtree
   *  @param stat  the right subtree of the operator.
   */
  public WhileStatement(final Location loc,
     final Expression exp, final Statement stat)
  {
    super(loc);
    this.exp = exp;
    this.stat = stat;
  }

  /** Get the left subtree of the node.
   *
   *  @return the left subtree of the node.
   */
  public Expression getLeft()
  {
    return exp;
  }

  /** Set the left subtree of the node.
   *
   *  @param left the new left subtree of the node.
   */
  public void setLeft(Expression left)
  {
    this.exp = exp;
  }

  /** Get the right subtree of the node.
   *
   *  @return the right subtree of the node.
   */
  public Statement getRight()
  {
    return stat;
  }

  /** Set the right subtree of the node.
   *
   *  @param right the new right subtree of the node.
   */
  public void setRight(Statement right)
  {
    this.stat = stat;
  }

  /** Apply a visitor to the node.
   *
   *  @param visitor the visitor to apply.
   *
   *  @return the value generated by the visitor.
   */
  @Override public <T> T apply(TreeVisitor<T> visitor)
  {
    return visitor.visit(this);
  }
}

